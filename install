#!/bin/bash

# Initialize flag variables
verbose=0
force=0

# Help message function
print_help() {
    echo "Usage: $0 [options]"
    echo "Options:"
    echo "  -v  Verbose output. Print more information."
    echo "  -f  Force. Always create symlinks even if files already exist. "
    echo "  -h  Help. Show this usage message."
    exit 0
}

# Parse command line options
while getopts ":vfh" opt; do
    case $opt in
        v)
            verbose=1
            ;;
        f)
            force=1
            ;;
        h)
            print_help
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
    esac
done

# Remove the options from the positional parameters
shift $((OPTIND -1))


# Function to echo messages if verbose is enabled
echo_if_verbose() {
    [ $verbose -eq 1 ] && echo "$@"
}

# Function to create a directory if it doesn't exist
create_directory() {
    if [ ! -d "$1" ]; then
        echo_if_verbose "Creating directory: $1"
        mkdir -p "$1"
    else
        echo_if_verbose "Directory already exists: $1"
    fi
}

create_backup() {
    local target_file=$1
    local backup_dir=$2

    local backup_path="$backup_dir/$(basename "$target_file")"
    mv "$target_file" "$backup_path"
    echo_if_verbose "Moved existing file to $backup_path"
}

create_symlink() {
    local file_path=$1
    local link_path=$2

    ln -s "$(realpath -- "$file_path")" "$link_path"
    echo "Created new symlink for $file_path -- $link_path"

}

# Function to create symlinks for all files in a specified directory
create_symlinks() {
    local source_dir=$1
    local backup_dir="./backup"

    # Ensure the backup directory exists
    create_directory "$backup_dir"

    # Find all files in the source directory and loop through them
    for file in $(find $source_dir -type f); do
        # Construct the target directory path
        local target_file="${file/$source_dir/$HOME}"
        local target_dir=$(dirname "$target_file")

        # Create the target directory if it doesn't exist
        create_directory "$target_dir"

        # Check if the file (or symlink) already exists
        if [ -e "$target_file" ] || [ -h $target_file ]; then
            if [ $force -eq 1 ]; then
                # Force mode: backup  without prompting
                create_backup "$target_file" "$backup_dir"
                create_symlink "$file" "$target_file"
            else
                # No force mode: ask the user
                echo -n "File $target_file exists. "
                echo -n "Move to backup and create a new symlink? (y/N) "
                read -n 1 -r
                echo    # Move to a new line
                if [[ $REPLY =~ ^[Yy]$ ]]; then
                    create_backup "$target_file" "$backup_dir"
                    create_symlink "$file" "$target_file"
                else
                    echo "Skipping $file"
                fi
            fi
        else
            create_symlink "$file" "$target_file"
        fi
    done
    echo_if_verbose "All symbolic links for the dotfiles have been created."
}

setup_nvim() {
    if ! [ -e $HOME/.local/share/nvim/site/autoload/plug.vim ]; then
        echo_if_verbose "Downloading plug.vim"
        sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
           https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    fi
    echo_if_verbose "Installing nvim plugins"
    nvim -es -u init.vim -i NONE -c "PlugInstall" -c "qa"
}

dotfiles_dir="$(pwd)/dotfiles"

create_symlinks "$dotfiles_dir"
setup_nvim


